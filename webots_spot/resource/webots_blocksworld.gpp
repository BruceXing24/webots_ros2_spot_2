
symbol domain block = {a, b, c}
symbol domain location = block | {t1, t2, t3}

location fluent loc(block x) {
initially:
	(a) = t1;
	(b) = t2;
	(c) = t3;
}

action stack(block x, location y) {
precondition:
	  x != y // Can't stack x on x
	& loc(x) != y // Can't stack the same thing twice
	& (!exists(block z) loc(z) == x) // Nothing is on x
	& (!exists(block z) loc(z) == y) // or nothing is on y
mapping:
	"/stack" {
		block = x,
		location = y
	}
effect:
	loc(x) = y;
}


bool function goal() =
	loc(b) == a & loc(c) == b


number function reward() =
	if (goal())
		100
	else
		-1

bool function postcond() = goal()

		

procedure main() {
	solve(8, reward())
		while (!goal())
			pick (block x in {a, b, c})
				pick(location y in {t1, t2, t3, a, b, c})
					stack(x, y);
}